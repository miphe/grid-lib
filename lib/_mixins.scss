
// Renders some styles to better understand how the grids work visually.
@mixin show-grid-columns {
  > * {
    background: beige;
    border: 1px dashed rgba(50, 50, 50, 0.25);
    padding: 1.8rem;
    color: rgba(50, 50, 50, 0.25);

    &:hover {
      border-color: rgba(50, 50, 50, 1);
      color: rgba(50, 50, 50, 1);
    }
  }
}

// Takes an object of span settings and omits the irrelevant properties
// also adds relevant properties based on global susy settings.
@mixin render-span($render-span-settings) {

  $render-span_new-settings: ();

  // $render-span-settings variable has to have the following structure:
  // If omitted, they fall back to default (on the right)
  // column-count       : <num>                  # Required
  // total-column-count : <num>                  # Susy global setting
  // last               : <bool>                 # false
  // gutter-override    : no-gutters / <length>  # Susy global setting
  // simple-grid        : <bool>                 # false

  // Important note of confusion; gutter-override works with Susy's
  // native gutter correction logic, at the time of writing it will
  // add or _not render_ gutters - it will not remove them.
  // When in need of a grid without gutters altogether (no space)
  // between columns, the simple-grid option is what you want. It
  // will make use of regular math instead of Susy.

  // Prepares column count.
  @if map-get($render-span-settings, column-count) {
    $render-span_column-count: map-get($render-span-settings, column-count);
    $render-span_new-settings: join($render-span_new-settings, $render-span_column-count of);
  }

  // Prepares total column count.
  @if map-get($render-span-settings, total-column-count) {
    $render-span_total: map-get($render-span-settings, total-column-count);
    $render-span_new-settings: join($render-span_new-settings, $render-span_total);
  } @else {
    $render-span_total: map-get($susy, columns);
    $render-span_new-settings: join($render-span_new-settings, $render-span_total);
  }

  // Prepares 'last' keyword.
  @if map-get($render-span-settings, last) and not map-get($render-span-settings, gutter-override) and not map-get($render-span-settings, simple-grid) {
    $render-span_new-settings: join($render-span_new-settings, last);
  }

  // Prepares gutters TODO: work a bit on this, or remove the feature.
  @if map-get($render-span-settings, gutter-override) {
    $render-span_gutter-override: map-get($render-span-settings, gutter-override);
    $render-span_new-settings: join($render-span_new-settings, $render-span_gutter-override);
  }

  // @debug $render-span_new-settings;

  display: block;

  // In case we want just a simple grid, we use our own math.
  @if map-get($render-span-settings, simple-grid) {
    float: left;
    width: percentage(map-get($render-span-settings, column-count)/map-get($render-span-settings, total-column-count));
    margin: {
      left: 0;
      right: 0;
    };
  } @else {
    @include span($render-span_new-settings);
  }
}

// Compound mixin handling rendering grids based on a settings map.
@mixin standard-grid($std-grid_settings, $no-gutters: false) {
  $std-grid_columns:                  map-get($std-grid_settings, bps);
  $std-grid_column-length:            length($std-grid_columns);
  $std-grid_non-hidden-column-length: 0;
  $std-grid_single-column:            false;
  $std-grid_i:                        1;
  $std-grid_gutter-override:          false;

  @if $no-gutters { $std-grid_gutter-override: no-gutters; }

  // Creates a number of how many non hidden columns the settings contain.
  @each $column-name, $column-bps in map-get($std-grid_settings, bps) {
    @if index($column-bps, hide true) == null {
      $std-grid_non-hidden-column-length: $std-grid_non-hidden-column-length + 1;
    }
  }

  // Iterates over each column
  @each $column-name, $column-bps in map-get($std-grid_settings, bps) {

    // Creates variable letting us know if there is only one column in this grid.
    @if $std-grid_non-hidden-column-length == 1 {
      $std-grid_single-column: true;
    }

    // Creates selector for each immediate decendant
    // of placeholder's element. The assumption here being
    // that columns must be immediate decendants of the grid container.
    > *:nth-child(#{$std-grid_i}) {

      // $bla: (column-count: 2, last: true, gutter-override: 1/4);

      // Iterated over each breakpoint
      @each $label, $bp in $column-bps {

        // Hides column if it is explicitly hidden in settings
        // or if columns size is 0 (meaning no width).
        @if $bp == 0 or ($label == hide and $bp == true) {
          display: none;
        } @else {

          $std-grid_render-span-settings: (
            column-count       : $bp,
            total-column-count : map-get($std-grid_settings, columns),
            last               : $std-grid_single-column or ($std-grid_i == $std-grid_non-hidden-column-length),
            gutter-override    : $std-grid_gutter-override,
            simple-grid        : map-get($std-grid_settings, simple-grid)
          );

          // Skips media queries if the current breakpoint is default (mobile first).
          @if $label == "default" {
            @include render-span($std-grid_render-span-settings);
          } @else {
            @include breakpoint(map-get($breakpoint-settings, $label)) {
              @include render-span($std-grid_render-span-settings);
            }
          }
        }
      }
    }

    // Naively keeps track of visible columns.
    $std-grid_i: $std-grid_i + 1;
  }
}
